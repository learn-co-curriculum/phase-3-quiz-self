{
  "quiz": {
    "id": 19090,
    "title": "Self Quiz",
    "html_url": "https://learning.flatironschool.com/courses/3299/quizzes/19090",
    "mobile_url": "https://learning.flatironschool.com/courses/3299/quizzes/19090?force_user=1&persist_headless=1",
    "description": "<div id=\"git-data-element\" data-org=\"learn-co-curriculum\" data-repo=\"phase-3-quiz-self\"></div>\n<header class=\"fis-header\">\n  <a class=\"fis-git-link\" href=\"https://github.com/learn-co-curriculum/phase-3-quiz-self/issues/new\" target=\"_blank\"><img id=\"issue-img\" title=\"Create New Issue\" alt=\"Create New Issue\"></a>\n</header>\n\n<p>It's time to check your knowledge! Use this quiz to create a custom study guide.\nNote any answers that were marked incorrect, so you can study the relevant\nmaterial and try this quiz again.</p>\n\n<p>If you don't know the answer to a question, please do not guess. Instead, select\n\"I don't know\". It's OK not to know everything and to admit when we're unsure.</p>",
    "quiz_type": "assignment",
    "time_limit": null,
    "timer_autosubmit_disabled": false,
    "shuffle_answers": true,
    "show_correct_answers": true,
    "scoring_policy": "keep_highest",
    "allowed_attempts": 3,
    "one_question_at_a_time": true,
    "question_count": 8,
    "points_possible": 8.0,
    "cant_go_back": false,
    "access_code": null,
    "ip_filter": null,
    "due_at": null,
    "lock_at": null,
    "unlock_at": null,
    "published": false,
    "unpublishable": true,
    "locked_for_user": true,
    "lock_info": {
      "missing_permission": "participate_as_student",
      "asset_string": "quizzes:quiz_19090"
    },
    "lock_explanation": "This quiz is currently locked.",
    "hide_results": "until_after_last_attempt",
    "show_correct_answers_at": null,
    "hide_correct_answers_at": null,
    "all_dates": [
      {
        "due_at": null,
        "unlock_at": null,
        "lock_at": null,
        "base": true
      }
    ],
    "can_unpublish": true,
    "can_update": true,
    "require_lockdown_browser": false,
    "require_lockdown_browser_for_results": false,
    "require_lockdown_browser_monitor": false,
    "lockdown_browser_monitor_data": "",
    "speed_grader_url": null,
    "permissions": {
      "manage": true,
      "read": true,
      "create": true,
      "update": true,
      "submit": true,
      "preview": true,
      "delete": true,
      "read_statistics": true,
      "grade": true,
      "review_grades": true,
      "view_answer_audits": true
    },
    "quiz_reports_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19090/reports",
    "quiz_statistics_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19090/statistics",
    "message_students_url": "https://learning.flatironschool.com/api/v1/courses/3299/quizzes/19090/submission_users/message",
    "section_count": 1,
    "important_dates": false,
    "quiz_submission_versions_html_url": "https://learning.flatironschool.com/courses/3299/quizzes/19090/submission_versions",
    "assignment_id": 129365,
    "one_time_results": false,
    "only_visible_to_overrides": false,
    "assignment_group_id": 6376,
    "show_correct_answers_last_attempt": true,
    "version_number": 5,
    "has_access_code": false,
    "post_to_sis": false,
    "migration_id": "gcaf8f536f5c674c2ffdb2a14a94d9d7f",
    "question_types": [
      "multiple_choice_question",
      "multiple_answers_question"
    ]
  },
  "questions": [
    {
      "quiz_id": 19090,
      "id": 120554,
      "quiz_group_id": null,
      "assessment_question_id": 135533,
      "position": null,
      "question_name": "OO Concepts",
      "question_type": "multiple_choice_question",
      "question_text": "<p>An object is a bundle of code that defines both data and behaviors.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/self-basics\">Self Basics</a></li></ul><p></p>",
      "answers": [
        {
          "id": 5203,
          "text": "",
          "html": "<p>True</p>",
          "comments": "",
          "comments_html": "<p>Correct! Objects may have instance methods (behavior) and instance variables\n(data).</p>",
          "weight": 100.0
        },
        {
          "id": 1240,
          "text": "",
          "html": "<p>False</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        },
        {
          "id": 2923,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19090,
      "id": 120555,
      "quiz_group_id": null,
      "assessment_question_id": 135534,
      "position": null,
      "question_name": "OO Concepts",
      "question_type": "multiple_choice_question",
      "question_text": "<p>In Ruby, every object is aware of itself, and we can define methods in which we\ntell objects to operate on themselves.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/self-basics\">Self Basics</a></li></ul><p></p>",
      "answers": [
        {
          "id": 1889,
          "text": "",
          "html": "<p>True</p>",
          "comments": "",
          "comments_html": "<p>Yes! Ruby objects are self-aware. This means that you, as a developer, can\naccess properties and call methods on objects which then operate on those\nspecific instances using the <code>self</code> keyword.</p>",
          "weight": 100.0
        },
        {
          "id": 9834,
          "text": "",
          "html": "<p>False</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        },
        {
          "id": 6611,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19090,
      "id": 120556,
      "quiz_group_id": null,
      "assessment_question_id": 135535,
      "position": null,
      "question_name": "Self",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Consider the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">Dog</span>\n  <span class=\"nb\">attr_accessor</span> <span class=\"ss\">:name</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">good</span>\n    <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">name</span> <span class=\"o\">+</span> <span class=\"s2\">\" is a good dog\"</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n\n<span class=\"n\">harpo</span> <span class=\"o\">=</span> <span class=\"no\">Dog</span><span class=\"p\">.</span><span class=\"nf\">new</span>\n<span class=\"n\">harpo</span><span class=\"p\">.</span><span class=\"nf\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Harpo\"</span>\n<span class=\"n\">harpo</span><span class=\"p\">.</span><span class=\"nf\">good</span>\n</code></pre></div>\n<p>In the <code>good</code> method, the <code>self</code> keyword refers to the:</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/self-basics\">Self Basics</a></li></ul><p></p>",
      "answers": [
        {
          "id": 5842,
          "text": "",
          "html": "<p>The specific instance, or object, that the method is being called on.</p>",
          "comments": "",
          "comments_html": "<p>Awesome! <code>self</code> refers to the specific instance which has its own\ncharacteristics. <code>self</code> in an instance method will always refer to the\ninstance.</p>",
          "weight": 100.0
        },
        {
          "id": 1228,
          "text": "",
          "html": "<p>The <code>Dog</code> class.</p>",
          "comments": "",
          "comments_html": "<p>If <code>self</code> referred to <code>class Dog</code> that would mean that <code>self.name</code> inside\n<code>good</code> would be the same as calling <code>Dog.name</code>. Something about that doesn't\nseem right. What has a <code>name</code>: a <code>Dog</code> class or an instance?</p>",
          "weight": 0.0
        },
        {
          "id": 1740,
          "text": "",
          "html": "<p>Every instance, or object, of the <code>Dog</code> class.</p>",
          "comments": "",
          "comments_html": "<p>Objects are self aware, but they aren't automatically aware of all of the\nother objects instantiated from a class. Does <code>self</code> refer to one object or\nmany objects?</p>",
          "weight": 0.0
        },
        {
          "id": 3158,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19090,
      "id": 120557,
      "quiz_group_id": null,
      "assessment_question_id": 135536,
      "position": null,
      "question_name": "OO Concepts",
      "question_type": "multiple_answers_question",
      "question_text": "<p>Select all that apply. Monkey-patching is the practice of:</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/assignments/74041\">Counting Sentences Lab</a></li></ul><p></p>",
      "answers": [
        {
          "id": 4963,
          "text": "",
          "comments": "",
          "comments_html": "<p>Yes! With monkey patching, we can add brand new methods to the String or Array\nclasses, for example.</p>",
          "weight": 100.0,
          "html": "<p>Adding methods to Ruby's core classes.</p>"
        },
        {
          "id": 1185,
          "text": "",
          "comments": "",
          "comments_html": "<p>Exactly! We can entirely overwrite an existing method or add to its\nfunctionality. We don't recommend doing this though - it could cause a lot of\nconfusion and bugs.</p>",
          "weight": 100.0,
          "html": "<p>Altering existing methods in Ruby's core classes.</p>"
        },
        {
          "id": 4247,
          "text": "",
          "comments": "",
          "comments_html": "<p>This is not a part of monkey patching because we wouldn't be patching\nanything. We'd just be declaring an entirely new class.</p>",
          "weight": 0.0,
          "html": "<p>Writing Ruby classes from scratch</p>"
        },
        {
          "id": 1130,
          "text": "",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0,
          "html": "<p>I don't know</p>"
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19090,
      "id": 120558,
      "quiz_group_id": null,
      "assessment_question_id": 135537,
      "position": null,
      "question_name": "OO Syntax",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Consider the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">Car</span>\n\n  <span class=\"nb\">attr_accessor</span> <span class=\"ss\">:name</span><span class=\"p\">,</span> <span class=\"ss\">:owner</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">)</span>\n    <span class=\"vi\">@name</span> <span class=\"o\">=</span> <span class=\"nb\">name</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">honk</span>\n    <span class=\"s2\">\"Beep!\"</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">take_ownership</span><span class=\"p\">(</span><span class=\"n\">owner_name</span><span class=\"p\">)</span>\n    <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">owner</span> <span class=\"o\">=</span> <span class=\"n\">owner_name</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"n\">lancelot</span> <span class=\"o\">=</span> <span class=\"no\">Car</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"s2\">\"2003 Mitsubishi Lancer\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>What will <code>lancelot</code> return?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/self-basics\">Self Basics</a></li></ul><p></p>",
      "answers": [
        {
          "id": 4739,
          "text": "",
          "html": "<p>An instance of <code>Car</code> with its <code>@name</code> set to <code>\"2003 Mitsubishi Lancer\"</code>.</p>",
          "comments": "",
          "comments_html": "<p>Perfect! <code>Car.new</code> was called with the name of the car, which resulted in an\ninstance of <code>Car</code> being returned and the <code>@name</code> instance variable being set.</p>",
          "weight": 100.0
        },
        {
          "id": 4774,
          "text": "",
          "html": "<p><code>nil</code></p>",
          "comments": "",
          "comments_html": "<p>When <code>new</code> is called on <code>Car</code>, it triggers the <code>initialize</code> method, which\nexpects an argument. What does calling <code>new</code> on a class return when the syntax\nis correct?</p>",
          "weight": 0.0
        },
        {
          "id": 5859,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"s2\">\"2003 Mitsubishi Lancer\"</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>That is the value stored in the instance variable <code>@name</code>. What does calling\n<code>new</code> on a class return?</p>",
          "weight": 0.0
        },
        {
          "id": 4885,
          "text": "",
          "html": "<p>An instance of <code>Car</code> with <code>@name</code> and <code>@owner</code> defined.</p>",
          "comments": "",
          "comments_html": "<p>Take a look at <code>initialize</code>. Which properties does it set?</p>",
          "weight": 0.0
        },
        {
          "id": 3018,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19090,
      "id": 120559,
      "quiz_group_id": null,
      "assessment_question_id": 135538,
      "position": null,
      "question_name": "OO Syntax",
      "question_type": "short_answer_question",
      "question_text": "<p>Consider the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">Car</span>\n\n  <span class=\"nb\">attr_accessor</span> <span class=\"ss\">:name</span><span class=\"p\">,</span> <span class=\"ss\">:owner</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">)</span>\n    <span class=\"vi\">@name</span> <span class=\"o\">=</span> <span class=\"nb\">name</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">honk</span>\n    <span class=\"s2\">\"Beep!\"</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">take_ownership</span><span class=\"p\">(</span><span class=\"n\">owner_name</span><span class=\"p\">)</span>\n    <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">owner</span> <span class=\"o\">=</span> <span class=\"n\">owner_name</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"n\">lancelot</span> <span class=\"o\">=</span> <span class=\"no\">Car</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"s2\">\"2003 Mitsubishi Lancer\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>What will <code>lancelot.take_ownership(\"Robert\")</code> return?</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/self-basics\">Self Basics</a></li></ul><p></p>",
      "answers": [
        {
          "id": 8121,
          "text": "Robert",
          "comments": "",
          "comments_html": "<p>Exactly! It will also set the instance variable <code>owner</code> to \"Robert\".</p>",
          "weight": 100
        },
        {
          "id": 3385,
          "text": "\"Robert\"",
          "comments": "",
          "comments_html": "<p>Exactly! It will also set the instance variable <code>owner</code> to \"Robert\".</p>",
          "weight": 100
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19090,
      "id": 120560,
      "quiz_group_id": null,
      "assessment_question_id": 135539,
      "position": null,
      "question_name": "OO Syntax",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Consider the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">Car</span>\n\n  <span class=\"nb\">attr_accessor</span> <span class=\"ss\">:name</span><span class=\"p\">,</span> <span class=\"ss\">:owner</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">)</span>\n    <span class=\"vi\">@name</span> <span class=\"o\">=</span> <span class=\"nb\">name</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">honk</span>\n    <span class=\"s2\">\"Beep!\"</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">take_ownership</span><span class=\"p\">(</span><span class=\"n\">owner_name</span><span class=\"p\">)</span>\n    <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">owner</span> <span class=\"o\">=</span> <span class=\"n\">owner_name</span>\n  <span class=\"k\">end</span>\n\n<span class=\"k\">end</span>\n\n<span class=\"n\">lancelot</span> <span class=\"o\">=</span> <span class=\"no\">Car</span><span class=\"p\">.</span><span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"s2\">\"2003 Mitsubishi Lancer\"</span><span class=\"p\">)</span>\n<span class=\"n\">lancelot</span><span class=\"p\">.</span><span class=\"nf\">take_ownership</span><span class=\"p\">(</span><span class=\"s2\">\"Robert\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>What will <code>lancelot</code> return? (Select the <strong>best</strong> answer)</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/self-basics\">Self Basics</a></li></ul><p></p>",
      "answers": [
        {
          "id": 3758,
          "text": "",
          "html": "<p>An instance of <code>Car</code> with <code>@name</code> and <code>@owner</code> defined</p>",
          "comments": "",
          "comments_html": "<p>Correct! <code>@name</code> was defined when the instance was created and <code>@owner</code> was\ndefined when <code>take_ownership</code> was called, and <code>lancelot</code> is storing the object\nitself.</p>",
          "weight": 100.0
        },
        {
          "id": 6132,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"s2\">\"Robert\"</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>\"Robert\" is the name of the owner. What is stored in <code>lancelot</code>?</p>",
          "weight": 0.0
        },
        {
          "id": 1952,
          "text": "",
          "html": "<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"s2\">\"2003 Mitsubishi Lancer\"</span>\n</code></pre></div>",
          "comments": "",
          "comments_html": "<p>This is the value of <code>@name</code> and it's a String. What type of data is stored in\n<code>lancelot</code>? What properties does it have?</p>",
          "weight": 0.0
        },
        {
          "id": 7043,
          "text": "",
          "html": "<p>An instance of <code>Car</code> with <code>@name</code> defined</p>",
          "comments": "",
          "comments_html": "<p>Partly correct. An instance with <code>@name</code> defined will be returned, but we must\nremember that <code>take_ownership</code> was also called. What happened when that method\nwas called?</p>",
          "weight": 0.0
        },
        {
          "id": 4690,
          "text": "",
          "html": "<p>I don't know</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    },
    {
      "quiz_id": 19090,
      "id": 120561,
      "quiz_group_id": null,
      "assessment_question_id": 135540,
      "position": null,
      "question_name": "OO Concepts",
      "question_type": "multiple_choice_question",
      "question_text": "<p>Consider the following code:</p>\n<div class=\"highlight\"><pre class=\"highlight ruby\"><code><span class=\"k\">class</span> <span class=\"nc\">Car</span>\n\n  <span class=\"nb\">attr_accessor</span> <span class=\"ss\">:name</span><span class=\"p\">,</span> <span class=\"ss\">:owner</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">)</span>\n    <span class=\"vi\">@name</span> <span class=\"o\">=</span> <span class=\"nb\">name</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">honk</span>\n    <span class=\"s2\">\"Beep!\"</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">take_ownership</span><span class=\"p\">(</span><span class=\"n\">owner_name</span><span class=\"p\">)</span>\n    <span class=\"nb\">self</span><span class=\"p\">.</span><span class=\"nf\">owner</span> <span class=\"o\">=</span> <span class=\"n\">owner_name</span>\n  <span class=\"k\">end</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">showing_self</span>\n    <span class=\"nb\">puts</span> <span class=\"nb\">self</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div>\n<p>In the <code>showing_self</code> method, you can call any instance methods declared in the\nclass class on <code>self</code>.</p>",
      "points_possible": 1.0,
      "correct_comments": "",
      "incorrect_comments": "",
      "neutral_comments": "",
      "correct_comments_html": "",
      "incorrect_comments_html": "",
      "neutral_comments_html": "<p><strong>Source/s:</strong></p><ul><li><a href=\"https://learning.flatironschool.com/courses/3299/pages/self-basics\">Self Basics</a></li></ul><p></p>",
      "answers": [
        {
          "id": 3702,
          "text": "",
          "html": "<p>True</p>",
          "comments": "",
          "comments_html": "<p>Yes! Any instance methods declared inside a class can be called on <code>self</code>.</p>",
          "weight": 100.0
        },
        {
          "id": 1442,
          "text": "",
          "html": "<p>False</p>",
          "comments": "",
          "comments_html": "<p>Keeping in mind that <code>self</code> refers to the specific instance/object of a class,\nwhich instance methods wouldn't you be able to call on <code>self</code>? You might want to\nreview the Source/s for this question.</p>",
          "weight": 0.0
        },
        {
          "id": 3018,
          "text": "",
          "html": "<p>I don't know.</p>",
          "comments": "",
          "comments_html": "<p>Be sure to study the source/s for this question. You'll get it next time.</p>",
          "weight": 0.0
        }
      ],
      "variables": null,
      "formulas": null,
      "answer_tolerance": null,
      "formula_decimal_places": null,
      "matches": null,
      "matching_answer_incorrect_matches": null
    }
  ]
}